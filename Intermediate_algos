------------------------
Roman-Number Converter
------------------------
function convertToRoman(num) {
  var output = '';
  var numerals = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ];
  var romans = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];
  
  for(var i = 0; i<numerals.length; i++){
    while(numerals[i]<=num){
      output = output + romans[i];
      num = num - numerals[i];
    }
  } 
 return output;
}

convertToRoman(36);


------------------
Wherefore art thou
------------------
function whatIsInAName(collection, source) {
  // What's in a name?
  var arr = collection.filter(function(item){
    for (var i in source){
      if (source[i]!=item[i]){
        return false;
      }
    }
    return true;    
  });
  return arr;
}

whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });


----------------------
Sum All Prime numbers
---------------------
function sumPrimes(num) {
  var result = 0;
  for(var i = num; i>=2; i--){
    if(isPrime(i)){
      result = result + i;
    }
    else{
      continue;
    }
  }
  return result;
}

function isPrime(num) {
    var start = 2;
    while (start <= Math.sqrt(num)) {
        if (num % start++ < 1) return false;
    }
    return num > 1;
}

sumPrimes(10);


--------------------
Search and Replace
--------------------

function myReplace(str, before, after) {
  // finding the index of the before in the string
  var index = str.indexOf(before);
  
  // we want to capitalize the word so, check whether the first character is in upper case or not
  if(str[index] === str[index].toUpperCase()){
    after = after.charAt(0).toUpperCase() + after.slice(1);
  }
  str = str.replace(before,after);
  return str;
}

myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");


----------------
Missing Letters
----------------
function fearNotLetter(str) {  
  for(var i = 0; i<str.length; i++){
    var code =  str.charCodeAt(i);
    if(code !== str.charCodeAt(0) + i){
      return String.fromCharCode(code-1);
    }
  }
 return undefined;
}

fearNotLetter("abce");


--------
Boo Who
--------
function booWho(bool){
  return typeof(bool)==='boolean';
}
booWho('true');


----------------------
convert HTML entities
----------------------
function convertHTML(str) {
  // &colon;&rpar;
  var final = str.replace(/&/g, '&amp;')
  .replace(/"/g, '&quot;')
  .replace(/'/g, '&apos;')
  .replace(/>/g, '&gt;')
  .replace(/</g, '&lt;');
  return final;
}

convertHTML("Dolce & Gabbana");

-----------------
Everything be true
------------------

function truthCheck(collection, pre) {
  // Is everyone being true?
  return collection.every(obj => obj[pre]);
}

truthCheck([{"user": "Tinky-Winky", "sex": "male"}, {"user": "Dipsy", "sex": "male"}, {"user": "Laa-Laa", "sex": "female"}, {"user": "Po", "sex": "female"}], "sex");


------------
spinal case
------------

function spinalCase(str) {
  // "It's such a fine line between stupid, and clever."
  // --David St. Hubbins
  return str.split(/\s|_|(?=[A-Z])/g).join('-').toLowerCase();
}
spinalCase('This Is Spinal Tap');


--------------------------------
sum of all odd fibonacci numbers
---------------------------------
function sumFibs(num) {
  var previousNum, currentNum, result;
  previousNum = 0;
  currentNum = 1;
  result = 0;
  while(currentNum <= num){
    if(currentNum%2!==0){
      result = result + currentNum;
    }
    currentNum = currentNum + previousNum;
    previousNum = currentNum - previousNum;
  }
  return result;
}
sumFibs(6);

--------
Drop it
--------
function dropElements(arr, func) {
  // Drop them elements.
  var len = arr.length;
  for(var i=0; i<len; i++){
    if(func(arr[0])){
      break;
    }else{
      arr.shift();
    }
  }
  return arr;
}

dropElements([1, 2, 3, 4], function(n) {return n > 5; });


--------------
Binary Agents
--------------

function binaryAgent(str) {
  var final = str.split(" ").map(function(e) {
    return String.fromCharCode(parseInt(e, 2));
  }).join('');
  return final;
}

binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");

----------------
Finders keepers
----------------
function findElement(arr, func) {
  var num = 0;
  var final = arr.filter(func);
  return final[0];
}

findElement([1, 2, 3, 4], function(num){ return num % 2 === 0; });


-------------
Sorted Union
-------------
function uniteUnique(arr) {
  var final = [];
    for (var i=0;i<arguments.length;i++){
    for (var j=0;j<arguments[i].length;j++){
     if (!final.includes(arguments[i][j])){
       final.push(arguments[i][j]);
     }
    }
  }
  return final;
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);


----------
Pig Latin
----------
function translatePigLatin(str){
  var vowels = ['a','e','i','o','u'];
  var position = 0;
  if(vowels.indexOf(str[position]) !== -1){
    return str + 'way';
  }
  for(position=1; position<str.length; position++){
    if(vowels.indexOf(str[position]) !== -1){
      break;
    }
  }
  return str.slice(position,str.length) + str.slice(0, position) + 'ay';
}
translatePigLatin('glove');


------------
DNA Pairing
------------
var pairs = {'A':'T','T':'A','G':'C','C':'G'};

function pairElement(str) {
  return str.split('').map(function(e){
    return [e, pairs[e]];
  });
}

pairElement("GCG");


------------
Steamroller
------------

function steamrollArray(arr) {
  // I'm a steamroller, baby
  while(arr.findIndex(Array.isArray)>-1){
    var x=arr.shift();
    if(Array.isArray(x)){
      arr=arr.concat(x);
    }else{
      arr.push(x);
    }    
  }
  return arr;
}

steamrollArray([1, [2], [3, [[4]]]]);





